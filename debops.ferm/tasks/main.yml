---

- name: Configure ferm status in debconf
  debconf:
    name: 'ferm'
    question: 'ferm/enable'
    vtype: 'boolean'
    value: '{{ "yes" if ferm__enabled|bool else "no" }}'

- name: Ensure ferm is installed
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: 'no'
  with_flattened:
    - '{{ ferm__base_packages }}'
    - '{{ ferm__packages }}'
  when: ferm__enabled | bool

- name: Make sure required directories exist
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: 'root'
    group: 'adm'
    mode: '2750'
  with_items:
    - '/etc/ferm/ferm.d'
    - '/etc/ferm/filter-input.d'
    - '/etc/ferm/hooks/pre.d'
    - '/etc/ferm/hooks/post.d'
    - '/etc/ferm/hooks/flush.d'

- name: Copy custom files to remote hosts
  copy:
    src: '{{ item.src | d(omit) }}'
    content: '{{ item.content | d(omit) }}'
    dest:  '{{ item.dest }}'
    owner: '{{ item.owner | d(omit) }}'
    group: '{{ item.group | d(omit) }}'
    mode:  '{{ item.mode  | d(omit) }}'
    directory_mode: '{{ item.directory_mode | d(omit) }}'
    follow: '{{ item.follow | d(omit) }}'
    force:  '{{ item.force  | d(omit) }}'
  with_flattened:
    - '{{ ferm__custom_files }}'
    - '{{ ferm__group_custom_files }}'
    - '{{ ferm__host_custom_files }}'
  when: ((item.src is defined or item.content is defined) and
         item.dest is defined)
  register: ferm__register_files
  tags: [ 'role::ferm:custom_files' ]

- name: Configure ferm default variables
  template:
    src: 'etc/default/ferm.j2'
    dest: '/etc/default/ferm'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart ferm' ]

- name: Configure main ferm config file
  template:
    src: 'etc/ferm/ferm.conf.j2'
    dest: '/etc/ferm/ferm.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  notify: [ 'Restart ferm' ]

- name: Remove ip(6)tables rules if requested
  file:
    path: '/etc/ferm/ferm.d/{{ ferm__weight_map[item.weight_class|d()] | d(item.weight | d(ferm__default_weight)) }}_{{ item.filename | d(((item.role + "_" + ((item.role_weight + "_") if item.role_weight|d() else "")) if item.role|d() else "") + item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    state: 'absent'
  with_flattened:
    - '{{ ferm_rules           | d([]) | list }}'
    - '{{ ferm_group_rules     | d([]) | list }}'
    - '{{ ferm_host_rules      | d([]) | list }}'
    - '{{ ferm_dependent_rules | d([]) | list }}'
    - '{{ ferm_default_rules   | d([]) | list }}'
    - '{{ ferm__rules }}'
    - '{{ ferm__group_rules }}'
    - '{{ ferm__host_rules }}'
    - '{{ ferm__dependent_rules }}'
    - '{{ ferm__default_rules }}'
  when: (ferm__enabled|bool and item.type|d() and
         ((item.rule_state|d() and item.rule_state == 'absent') or
          (item.delete|d() | bool)))
  register: ferm__register_rules_del
  tags: [ 'role::ferm:rules' ]

- name: Configure ip(6)tables rules
  template:
    src: 'etc/ferm/ferm.d/{{ item.type }}.conf.j2'
    dest: '/etc/ferm/ferm.d/{{ ferm__weight_map[item.weight_class|d()] | d(item.weight | d(ferm__default_weight)) }}_{{ item.filename | d(((item.role + "_" + ((item.role_weight + "_") if item.role_weight|d() else "")) if item.role|d() else "") + item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  with_flattened:
    - '{{ ferm_rules           | d([]) | list }}'
    - '{{ ferm_group_rules     | d([]) | list }}'
    - '{{ ferm_host_rules      | d([]) | list }}'
    - '{{ ferm_dependent_rules | d([]) | list }}'
    - '{{ ferm_default_rules   | d([]) | list }}'
    - '{{ ferm__rules }}'
    - '{{ ferm__group_rules }}'
    - '{{ ferm__host_rules }}'
    - '{{ ferm__dependent_rules }}'
    - '{{ ferm__default_rules }}'
  when: (ferm__enabled|bool and item.type|d() and
         ((item.rule_state is undefined or item.rule_state != 'absent') and
          not (item.delete|d() | bool)))
  register: ferm__register_rules_add
  tags: [ 'role::ferm:rules' ]

- name: Remove iptables INPUT rules if requested
  file:
    path: '/etc/ferm/filter-input.d/{{ ferm__weight_map[item.weight_class|d()] | d(item.weight | d(ferm__default_weight)) }}_{{ item.filename | d(item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    state: 'absent'
  with_flattened:
    - '{{ ferm_input_list }}'
    - '{{ ferm_input_group_list }}'
    - '{{ ferm_input_host_list }}'
    - '{{ ferm_input_dependent_list }}'
  when: (ferm__enabled|bool and item.type|d() and (item.delete|d() | bool))
  register: ferm__register_input_rules_del
  tags: [ 'role::ferm:rules' ]

- name: Configure iptables INPUT rules
  template:
    src: 'etc/ferm/filter-input.d/{{ item.type }}.conf.j2'
    dest: '/etc/ferm/filter-input.d/{{ ferm__weight_map[item.weight_class|d()] | d(item.weight | d(ferm__default_weight)) }}_{{ item.filename | d(item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  with_flattened:
    - '{{ ferm_input_list }}'
    - '{{ ferm_input_group_list }}'
    - '{{ ferm_input_host_list }}'
    - '{{ ferm_input_dependent_list }}'
  when: (ferm__enabled|bool and item.type|d() and not (item.delete|d() | bool))
  register: ferm__register_input_rules_add
  tags: [ 'role::ferm:rules' ]

- name: Restart ferm
  service:
    name: 'ferm'
    state: 'restarted'
  when: (ferm__enabled | bool and (ferm__register_files.changed|bool or
         ferm__register_rules_del.changed|bool or ferm__register_rules_add.changed|bool or
         ferm__register_input_rules_del.changed|bool or ferm__register_input_rules_add.changed|bool))

- name: Clear iptables rules if ferm is disabled
  service:
    name: 'ferm'
    state: 'stopped'
  when: (not ferm__enabled | bool and ferm__flush | bool)
  tags: [ 'role::ferm:rules' ]

- name: Configure sysctl
  template:
    src: 'etc/sysctl.d/30-ferm.conf.j2'
    dest: '/etc/sysctl.d/30-ferm.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: ferm__register_sysctl
  tags: [ 'role::ferm:rules' ]

- name: Reload sysctl configuration if changed
  command: sysctl -p /etc/sysctl.d/30-ferm.conf
  when: ferm__register_sysctl.changed | bool
  tags: [ 'role::ferm:rules' ]

- name: Ensure that /etc/network/if-pre-up.d exists
  file:
    path: '/etc/network/if-pre-up.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Configure forwarding in ifupdown if enabled
  template:
    src: 'etc/network/if-pre-up.d/ferm-forward.j2'
    dest: '/etc/network/if-pre-up.d/ferm-forward'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [ 'role::ferm:rules' ]

- name: Disable ferm after changes when requested
  lineinfile:
    dest: '/etc/default/ferm'
    regexp: '^ENABLED="'
    line: 'ENABLED="no"'
  when: not ferm__enabled | bool

- name: Ensure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save ferm local facts
  template:
    src: 'etc/ansible/facts.d/ferm.fact.j2'
    dest: '/etc/ansible/facts.d/ferm.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  tags: [ 'role::ferm:rules' ]

